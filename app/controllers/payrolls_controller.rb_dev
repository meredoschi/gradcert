class PayrollsController < ApplicationController
  before_action :set_payroll, only: [:show, :edit, :update, :destroy, :calculate, :report, :clear, :absences]

  #  before_action :set_report_variables, only: [:report, :show]

  before_filter :authenticate_user! # By default... Devise

  before_action :check_for_annotations, only: [:destroy]

  before_action :check_if_done, only: [:destroy]

  #	load_and_authorize_resource  # CanCan(Can)

  # http://stackoverflow.com/questions/11117226/custom-actions-in-cancan
  load_and_authorize_resource :except => [:annotationsreport, :annotate, :deannotate, :multiple, :absences]

  # GET /payrolls
  def index

    #     @payrolls = Payroll.ordered_by_reference_month # i.e. Month worked

    #    @payrolls = Payroll.ordered_by_payment_date_reference_month_desc

    @title=t('list')+' '+t('activerecord.models.payroll').pluralize

    if is_admin_or_manager(current_user)

      @title=t('navbar.financial').upcase
      @title+=' | '+t('activerecord.models.payroll').capitalize.pluralize

    else

      if is_local_admin(current_user)

        @title=t('navbar.financial').upcase
        @title+=' | '+t('activerecord.models.payroll').capitalize.pluralize

      else

        @title=t('my.mp').upcase+' '+tm('payroll').pluralize.upcase

      end

    end

    #  	@search = Payroll.ordered_by_reference_month.accessible_by(current_ability).ransack(params[:q])
    if is_admin_or_manager(current_user)

      @all_payrolls=Payroll.includes(:taxation).all

    else

      @all_payrolls=Payroll.all

    end

    @payrolls_accessible=@all_payrolls.accessible_by(current_ability)
    @search = @payrolls_accessible.ordered_by_most_recent.ransack(params[:q])

    @payrolls=@search.result.page(params[:page]).per(10)
    @numpayrolls=@payrolls_accessible.count

  end

  # GET /payrolls/1/report

  def report

    redirect_to controller: 'annotationreports', action: 'show', payroll_id: @payroll.id

  end

  # GET /payrolls/1/clear

  # Clear all annotations for payroll
  def clear

    redirect_to controller: 'payrollcalculation', action: 'clear', payroll_id: @payroll.id

  end

  # Completion day in numeric format.  Number of days since application's "epoch"
  def finishday

    return (finish-Settings.dayone).to_i

  end

  # GET /payrolls/1/calculate
  def calculate

    redirect_to controller: 'payrollcalculation', action: 'show', payroll_id: @payroll.id

  end

  # GET /payrolls/1/absences
  def absences

    redirect_to controller: 'absentreports', action: 'show', payroll_id: @payroll.id

  end

  # GET /payrolls/1
  def show

    @title=t('activerecord.models.payroll').capitalize

    set_report_variables

    if is_admin_or_manager(current_user)

      @title=t('navbar.financial').upcase+" | "+t('activerecord.models.payroll').capitalize+": "+@payroll.name

    else

      if is_local_admin(current_user)

        @title=t('navbar.financial').mb_chars.upcase+' | '+t('activerecord.models.payroll').capitalize

      else

        @title=tm('payroll').pluralize.upcase

        if !@payroll.name.nil?

          @title+=" : "+@payroll.name

        end

      end

    end

  end

  # GET /payrolls/new
  def new
    @payroll = Payroll.new

    if is_admin_or_manager(current_user)

      @title=t('navbar.financial').upcase+" | "+t('actions.new.f')+" "+t('activerecord.models.payroll')

    else

      if is_local_admin(current_user)

        @title=current_user.institution.name+": "+t('actions.new.f')+" "+t('activerecord.models.payroll')

      else

        @title=current_user.institution.name+": "+t('actions.new.f')+" "+t('activerecord.models.payroll')

      end

    end

  end

  # GET /payrolls/1/edit
  def edit

    #     @title=t('noun.edit')+" "+t('activerecord.models.payroll')

    if is_admin_or_manager(current_user)

      @title=t('navbar.financial').upcase+' | '+t('noun.edit')+' '+t('activerecord.models.payroll')

    else

      if is_local_admin(current_user)

        @title=t('navbar.financial').upcase+' | '+t('noun.edit')+' '+t('activerecord.models.payroll')

      else

        @title=t('noun.edit')+' '+tm('payroll').pluralize

      end

    end

  end

  # POST /payrolls
  def create
    @payroll = Payroll.new(payroll_params)


    set_sector
    set_number_of_days

    if @payroll.save
      redirect_to @payroll, notice: t('activerecord.models.payroll').capitalize+' '+t('created.f')+' '+t('succesfully')
    else
      render :new
    end
  end

  # PATCH/PUT /payrolls/1
  def update

    set_sector
    set_number_of_days

    if @payroll.update(payroll_params)
      # redirect_to @payroll, notice: 'Payroll was successfully updated.'
      redirect_to @payroll, notice: t('activerecord.models.payroll').capitalize+' '+t('updated.f')+' '+t('succesfully')
    else
      render :edit
    end
  end

  # DELETE /payrolls/1
  def destroy
    @payroll.destroy
    redirect_to payrolls_url, notice: t('activerecord.models.payroll').capitalize+' '+t('deleted.f')+' '+t('succesfully')

  end

  private

  def set_payroll_variables

    @all_annotations=Annotation.includes(registration: [student: [contact: {user: :institution}]])
    @all_events=Event.includes(:leavetype).includes(:registration) # used in report_annotations view (bullet)
  #  @all_institutions=Institution.all
  #  @all_registrations=Registration.all
    @scholarship_for_payroll=Scholarship.for_payroll(@payroll)

    @payroll_annotations=@all_annotations.for_payroll(@payroll)

    if !is_admin_or_manager(current_user)

      @payroll_annotations=@payroll_annotations.for_institution(current_user.institution)

    end

    @num_payroll_annotations=@payroll_annotations.count

  end

  # http://stackoverflow.com/questions/4054112/how-do-i-prevent-deletion-of-parent-if-it-has-child-records
  def check_for_annotations

    if @payroll.annotated?
      flash[:warning] = "Não é possível remover uma folha com anotações."
      #       render :action => :show

    end

  end

  # http://stackoverflow.com/questions/4054112/how-do-i-prevent-deletion-of-parent-if-it-has-child-records
  def check_if_done

    if @payroll.done?
      flash[:warning] = "Não é possível remover uma folha já concluída."

    end

  end


  # Payroll variable already set previously
  def clear_payroll

    redirect_to controller: 'payrollcalculation', action: 'show', payroll_id: @payroll.id


    #  	@payroll_annotations=Annotation.automatic.for_payroll(@payroll)

    #  	@payroll_annotations.delete_all

    #  	@residual_events=Event.for_payroll(@payroll).residual

    #  	@residual_events.delete_all

    # -------------------------------------
    #    @payroll.update(annotated: false)
    # -------------------------------------

  end


  def annotate_events



  end

  # Applies to managers only
  def set_sector

    if is_pap_manager(current_user)

      @payroll.pap=true

    end

    if is_medres_manager(current_user)

      @payroll.medres=true

    end

  end

  def set_number_of_days

    @payroll.daystarted=@payroll.startday
    @payroll.dayfinished=@payroll.finishday

  end

  # Use callbacks to share common setup or constraints between actions.
  def set_payroll
    @payroll = Payroll.find(params[:id])
  end

  # Only allow a trusted parameter "white list" through.
  def payroll_params
    params.require(:payroll).permit(:paymentdate, :done, :pap, :medres, :amount, :annotated, :comment, :taxation_id, :special, :scholarship_id, :monthworked, :daystarted, :dayfinished, :dataentrystart, :dataentryfinish)
  end
end
