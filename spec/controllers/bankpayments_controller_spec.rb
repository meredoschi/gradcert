require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BankpaymentsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Bankpayment. As you add validations to Bankpayment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BankpaymentsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all bankpayments as @bankpayments" do
      bankpayment = Bankpayment.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:bankpayments)).to eq([bankpayment])
    end
  end

  describe "GET #show" do
    it "assigns the requested bankpayment as @bankpayment" do
      bankpayment = Bankpayment.create! valid_attributes
      get :show, {:id => bankpayment.to_param}, valid_session
      expect(assigns(:bankpayment)).to eq(bankpayment)
    end
  end

  describe "GET #new" do
    it "assigns a new bankpayment as @bankpayment" do
      get :new, {}, valid_session
      expect(assigns(:bankpayment)).to be_a_new(Bankpayment)
    end
  end

  describe "GET #edit" do
    it "assigns the requested bankpayment as @bankpayment" do
      bankpayment = Bankpayment.create! valid_attributes
      get :edit, {:id => bankpayment.to_param}, valid_session
      expect(assigns(:bankpayment)).to eq(bankpayment)
    end
  end

  describe "GET #calculate_payroll" do
    it "calculates to payroll for @bankpayment" do
      #      bankpayment = Bankpayment.create! valid_attributes

      print I18n.t('activerecord.models.bankpayment').capitalize+': '

=begin

      # creation

      current_sequential=Bankpayment.pluck(:sequential).max

      if current_sequential # exists
        @next_sequential=current_sequential+1
      else
        @next_sequential=1
      end

#      @payroll=Payroll.latest.first

      @payroll=Payroll.special.last

      bankpayment = FactoryBot.create(:bankpayment, sequential: @next_sequential, resend: true)
      bankpayment.payroll=@payroll
      bankpayment.save

=end

      set_calculation_variables

      bankpayment=@all_bankpayments.resend.last

      puts bankpayment.name+', seq: '+bankpayment.sequential.to_s
      #      get :calculate_payroll, {:id => bankpayment.to_param}, valid_session


      @p=bankpayment.payroll

      print I18n.t('activerecord.models.payroll').capitalize+': '
      puts @p.name

      #    @registrations_in_context=Registration.contextual_on(@p.monthworked) # new for 2017

      @registrations_in_context=@all_registrations.contextual_on(@p.monthworked) # new for 2017

      print "@registrations_in_context = "
      puts @registrations_in_context.count.to_s

      # New for 2017
      #    @p_schoolterm=Schoolterm.for_payroll(@p)

      @p_schoolterm=@all_schoolterms.for_payroll(@p)

      if bankpayment.resend?

        #			@registration_ids_with_feedback=Feedback.pending.registration_ids_for_bankpayment(bankpayment)
        # Hotfix
        puts bankpayment.id.to_s
        print "@all_feedbacks count: "
        puts @all_feedbacks.count.to_s
        @registration_ids_with_feedback=@all_feedbacks.registration_ids_for_bankpayment(bankpayment)

        @feedback_ids=@all_feedbacks.where(bankpayment_id: bankpayment.id).pluck(:id)

        puts " @feedback_ids ->"
        puts @feedback_ids

        puts "@registration_ids_with_feedback -> "
        puts @registration_ids_with_feedback
#        To do: use can can matchers in order to be able to properly test with abilities
#        @registrations=@registrations_in_context.accessible_by(current_ability).where(id: @registration_ids_with_feedback)

        @registrations=@registrations_in_context.where(id: @registration_ids_with_feedback)

        @num_returned_payments=@registrations.count

      else

        @registrations=@registrations_in_context

      end

      print "@registrations = "
      puts @registrations.count.to_s

      puts "--> "

      @registrations.each do |r|

        puts r.detailed

      end

      #   @p_annotations=@all_annotations.accessible_by(current_ability).for_payroll(@p).ordered_by_contact_name

      @p_annotations=@all_annotations.for_payroll(@p).ordered_by_contact_name

      print "@p_annotations (payroll annotations) -> "

      puts @p_annotations.count.to_s

      @p_annotations.each do |a|

        puts a.detailed

      end

      @normal=@registrations.regular_for_payroll(@p)
      @cancelled=@registrations.cancelled_on_this_payroll(@p)
      @suspended=@registrations.suspended_on_this_payroll(@p)
      @renewed=@registrations.renewed_on_this_payroll(@p)

      @possible_ids=@normal

      @possible=@registrations.where(id: @possible_ids)

      @num_normal=@normal.count
      @num_cancelled=@cancelled.count
      @num_suspended=@suspended.count
      @num_renewed=@renewed.count

      @num_possible=@possible.count

      @num_payroll_annotations=@p_annotations.count

      @adjustments=@p_annotations.adjustment

      @num_adjustments=@adjustments.count

      @skip_payment=@registrations.skipped_students_for_payroll(@p)

      @skip_payment_ids=@skip_payment.pluck(:id)

      @num_skip_payment=@skip_payment.count

      @regular_annotations=@p_annotations.regular

      @num_regular_annotations=@regular_annotations.count

      @present_annotations=@regular_annotations.automatic.frequent # Filter manual annotations

      @num_present_annotations=@present_annotations.count

      @absent_annotations=@regular_annotations.absent

      @num_absent_annotations=@absent_annotations.count

      @num_regular_annotations=@regular_annotations.count

      @confirmedregistrations=@possible.where.not(id: @skip_payment_ids)

      @num_confirmed_for_payment=@confirmedregistrations.count

      #    @brackets=Bracket.for_taxation(bankpayment.payroll.taxation)

      @brackets=@all_brackets.for_taxation(bankpayment.payroll.taxation)

      @regular_payment=set_payment_amount(bankpayment)  # Regular payment amount for the payroll (i.e. for most people)


      end

    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Bankpayment" do
          expect {
            post :create, {:bankpayment => valid_attributes}, valid_session
          }.to change(Bankpayment, :count).by(1)
        end

        it "assigns a newly created bankpayment as @bankpayment" do
          post :create, {:bankpayment => valid_attributes}, valid_session
          expect(assigns(:bankpayment)).to be_a(Bankpayment)
          expect(assigns(:bankpayment)).to be_persisted
        end

        it "redirects to the created bankpayment" do
          post :create, {:bankpayment => valid_attributes}, valid_session
          expect(response).to redirect_to(Bankpayment.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved bankpayment as @bankpayment" do
          post :create, {:bankpayment => invalid_attributes}, valid_session
          expect(assigns(:bankpayment)).to be_a_new(Bankpayment)
        end

        it "re-renders the 'new' template" do
          post :create, {:bankpayment => invalid_attributes}, valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          skip("Add a hash of attributes valid for your model")
        }

        it "updates the requested bankpayment" do
          bankpayment = Bankpayment.create! valid_attributes
          put :update, {:id => bankpayment.to_param, :bankpayment => new_attributes}, valid_session
          bankpayment.reload
          skip("Add assertions for updated state")
        end

        it "assigns the requested bankpayment as @bankpayment" do
          bankpayment = Bankpayment.create! valid_attributes
          put :update, {:id => bankpayment.to_param, :bankpayment => valid_attributes}, valid_session
          expect(assigns(:bankpayment)).to eq(bankpayment)
        end

        it "redirects to the bankpayment" do
          bankpayment = Bankpayment.create! valid_attributes
          put :update, {:id => bankpayment.to_param, :bankpayment => valid_attributes}, valid_session
          expect(response).to redirect_to(bankpayment)
        end
      end

      context "with invalid params" do
        it "assigns the bankpayment as @bankpayment" do
          bankpayment = Bankpayment.create! valid_attributes
          put :update, {:id => bankpayment.to_param, :bankpayment => invalid_attributes}, valid_session
          expect(assigns(:bankpayment)).to eq(bankpayment)
        end

        it "re-renders the 'edit' template" do
          bankpayment = Bankpayment.create! valid_attributes
          put :update, {:id => bankpayment.to_param, :bankpayment => invalid_attributes}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested bankpayment" do
        bankpayment = Bankpayment.create! valid_attributes
        expect {
          delete :destroy, {:id => bankpayment.to_param}, valid_session
        }.to change(Bankpayment, :count).by(-1)
      end

      it "redirects to the bankpayments list" do
        bankpayment = Bankpayment.create! valid_attributes
        delete :destroy, {:id => bankpayment.to_param}, valid_session
        expect(response).to redirect_to(bankpayments_url)
      end
    end

    def set_calculation_variables

      @all_annotations=Annotation.all
      @all_bankpayments=Bankpayment.all
      @all_brackets=Bracket.all
      @all_feedbacks=Feedback.all
      @all_registrations=Registration.all
      @all_scholarships=Scholarship.all
      @all_schoolterms=Schoolterm.all

    end

    def set_payment_amount(bankpayment)

  		# if @bankpayment.payroll.special?

  	# 		 payment=@bankpayment.payroll.amount

  	# 	else

  	    payment=@all_scholarships.for_payroll(bankpayment.payroll).first.amount

   #  	end

  		return payment

  	end



  end
